(function (vega, vegaLite, vl, vegaTooltip, d3) {
  'use strict';

  vega = vega && Object.prototype.hasOwnProperty.call(vega, 'default') ? vega['default'] : vega;
  vegaLite = vegaLite && Object.prototype.hasOwnProperty.call(vegaLite, 'default') ? vegaLite['default'] : vegaLite;
  vl = vl && Object.prototype.hasOwnProperty.call(vl, 'default') ? vl['default'] : vl;

  // Appearance customization to improve readability.
  // See https://vega.github.io/vega-lite/docs/
  const dark = '#3e3c38';
  const config = {
    axis: {
      domain: false,
      tickColor: 'lightGray'
    },
    style: {
      "guide-label": {
        fontSize: 20,
        fill: dark
      },
      "guide-title": {
        fontSize: 30,
        fill: dark
      }
    }
  };

  const csvUrl = 'https://gist.githubusercontent.com/evarun22/318274dcc33d20b753516647310c41f3/raw/dd00bf22cc62b46d823021a32ad54fece64365ef/earthquakes_cleaned.csv';

  const getData = async () => {
    const data = await d3.csv(csvUrl);
    
    // Have a look at the attributes available in the console!
    console.log(data[0]);

    return data;
  };

  const brush = vl.selectInterval().encodings('x');

  const selection = vl.selectMulti('Select') // name the selection 'Select'
      .fields('Continent');


  const year_range = vl.markBar({width: 2})
      .select(brush)
      .encode(
        vl.x().fieldN('Year').scale({"zero": false}).title('Select year range'),
      	vl.tooltip().fieldN('Year')
      )
      .width(700)
      .height(15);

  const plot = vl
  	
    .markBar({ size: 15, opacity: 0.8 })
  	.select(selection)
    .transform(
      vl
        .groupby('Year', 'Continent')
        .aggregate(vl.count().field('ID').as('NumEarthquakes'))
    )
    .encode(
      vl.x().fieldN('Year').title('Year'),
      vl.y().fieldQ('NumEarthquakes').title('Number of Earthquakes'),
      vl.color().fieldN('Continent').title('Continent'),
      vl.tooltip([
        vl.color().fieldN('Continent').title('Continent'),
        vl.x().fieldN('Year').title('Year'),
        vl.y().fieldQ('NumEarthquakes').title('Earthquakes'),
      ]),
       vl.opacity().if(selection, vl.value(1)).value(0.3),
       vl.opacity().if((brush), vl.value(1)).value(0.3)
    )
  	.width(700)
  	.height(260);


  const viz = vl.vconcat(plot,year_range).spacing(5);

  vl.register(vega, vegaLite, {
    view: { renderer: 'svg' },
    init: view => { view.tooltip(new vegaTooltip.Handler().call); }
  });

  const run = async () => {
    const marks = viz
      .data(await getData())
      .autosize({ type: 'fit', contains: 'padding' })
      .config(config);
    
    document.body.appendChild(await marks.render());
  };
  run();

}(vega, vegaLite, vl, vegaTooltip, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImdldERhdGEuanMiLCJ2aXouanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcHBlYXJhbmNlIGN1c3RvbWl6YXRpb24gdG8gaW1wcm92ZSByZWFkYWJpbGl0eS5cbi8vIFNlZSBodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL1xuY29uc3QgZGFyayA9ICcjM2UzYzM4JztcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIGF4aXM6IHtcbiAgICBkb21haW46IGZhbHNlLFxuICAgIHRpY2tDb2xvcjogJ2xpZ2h0R3JheSdcbiAgfSxcbiAgc3R5bGU6IHtcbiAgICBcImd1aWRlLWxhYmVsXCI6IHtcbiAgICAgIGZvbnRTaXplOiAyMCxcbiAgICAgIGZpbGw6IGRhcmtcbiAgICB9LFxuICAgIFwiZ3VpZGUtdGl0bGVcIjoge1xuICAgICAgZm9udFNpemU6IDMwLFxuICAgICAgZmlsbDogZGFya1xuICAgIH1cbiAgfVxufTsiLCJpbXBvcnQgeyBjc3YgfSBmcm9tICdkMyc7XG5cbmNvbnN0IGNzdlVybCA9ICdodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2V2YXJ1bjIyLzMxODI3NGRjYzMzZDIwYjc1MzUxNjY0NzMxMGM0MWYzL3Jhdy9kZDAwYmYyMmNjNjJiNDZkODIzMDIxYTMyYWQ1NGZlY2U2NDM2NWVmL2VhcnRocXVha2VzX2NsZWFuZWQuY3N2JztcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBjc3YoY3N2VXJsKTtcbiAgXG4gIC8vIEhhdmUgYSBsb29rIGF0IHRoZSBhdHRyaWJ1dGVzIGF2YWlsYWJsZSBpbiB0aGUgY29uc29sZSFcbiAgY29uc29sZS5sb2coZGF0YVswXSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59OyIsImltcG9ydCB2bCBmcm9tICd2ZWdhLWxpdGUtYXBpJztcblxuY29uc3QgYnJ1c2ggPSB2bC5zZWxlY3RJbnRlcnZhbCgpLmVuY29kaW5ncygneCcpO1xuXG5jb25zdCBzZWxlY3Rpb24gPSB2bC5zZWxlY3RNdWx0aSgnU2VsZWN0JykgLy8gbmFtZSB0aGUgc2VsZWN0aW9uICdTZWxlY3QnXG4gICAgLmZpZWxkcygnQ29udGluZW50JylcblxuXG5jb25zdCB5ZWFyX3JhbmdlID0gdmwubWFya0Jhcih7d2lkdGg6IDJ9KVxuICAgIC5zZWxlY3QoYnJ1c2gpXG4gICAgLmVuY29kZShcbiAgICAgIHZsLngoKS5maWVsZE4oJ1llYXInKS5zY2FsZSh7XCJ6ZXJvXCI6IGZhbHNlfSkudGl0bGUoJ1NlbGVjdCB5ZWFyIHJhbmdlJyksXG4gICAgXHR2bC50b29sdGlwKCkuZmllbGROKCdZZWFyJylcbiAgICApXG4gICAgLndpZHRoKDcwMClcbiAgICAuaGVpZ2h0KDE1KTtcblxuY29uc3QgcGxvdCA9IHZsXG5cdFxuICAubWFya0Jhcih7IHNpemU6IDE1LCBvcGFjaXR5OiAwLjggfSlcblx0LnNlbGVjdChzZWxlY3Rpb24pXG4gIC50cmFuc2Zvcm0oXG4gICAgdmxcbiAgICAgIC5ncm91cGJ5KCdZZWFyJywgJ0NvbnRpbmVudCcpXG4gICAgICAuYWdncmVnYXRlKHZsLmNvdW50KCkuZmllbGQoJ0lEJykuYXMoJ051bUVhcnRocXVha2VzJykpXG4gIClcbiAgLmVuY29kZShcbiAgICB2bC54KCkuZmllbGROKCdZZWFyJykudGl0bGUoJ1llYXInKSxcbiAgICB2bC55KCkuZmllbGRRKCdOdW1FYXJ0aHF1YWtlcycpLnRpdGxlKCdOdW1iZXIgb2YgRWFydGhxdWFrZXMnKSxcbiAgICB2bC5jb2xvcigpLmZpZWxkTignQ29udGluZW50JykudGl0bGUoJ0NvbnRpbmVudCcpLFxuICAgIHZsLnRvb2x0aXAoW1xuICAgICAgdmwuY29sb3IoKS5maWVsZE4oJ0NvbnRpbmVudCcpLnRpdGxlKCdDb250aW5lbnQnKSxcbiAgICAgIHZsLngoKS5maWVsZE4oJ1llYXInKS50aXRsZSgnWWVhcicpLFxuICAgICAgdmwueSgpLmZpZWxkUSgnTnVtRWFydGhxdWFrZXMnKS50aXRsZSgnRWFydGhxdWFrZXMnKSxcbiAgICBdKSxcbiAgICAgdmwub3BhY2l0eSgpLmlmKHNlbGVjdGlvbiwgdmwudmFsdWUoMSkpLnZhbHVlKDAuMyksXG4gICAgIHZsLm9wYWNpdHkoKS5pZigoYnJ1c2gpLCB2bC52YWx1ZSgxKSkudmFsdWUoMC4zKVxuICApXG5cdC53aWR0aCg3MDApXG5cdC5oZWlnaHQoMjYwKTtcblxuXG5leHBvcnQgY29uc3Qgdml6ID0gdmwudmNvbmNhdChwbG90LHllYXJfcmFuZ2UpLnNwYWNpbmcoNSk7IiwiaW1wb3J0IHZlZ2EgZnJvbSAndmVnYSc7XG5pbXBvcnQgdmVnYUxpdGUgZnJvbSAndmVnYS1saXRlJztcbmltcG9ydCB2bCBmcm9tICd2ZWdhLWxpdGUtYXBpJztcbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tICd2ZWdhLXRvb2x0aXAnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgZ2V0RGF0YSB9IGZyb20gJy4vZ2V0RGF0YSc7XG5pbXBvcnQgeyB2aXogfSBmcm9tICcuL3Zpeic7XG5cbnZsLnJlZ2lzdGVyKHZlZ2EsIHZlZ2FMaXRlLCB7XG4gIHZpZXc6IHsgcmVuZGVyZXI6ICdzdmcnIH0sXG4gIGluaXQ6IHZpZXcgPT4geyB2aWV3LnRvb2x0aXAobmV3IEhhbmRsZXIoKS5jYWxsKTsgfVxufSk7XG5cbmNvbnN0IHJ1biA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgbWFya3MgPSB2aXpcbiAgICAuZGF0YShhd2FpdCBnZXREYXRhKCkpXG4gICAgLmF1dG9zaXplKHsgdHlwZTogJ2ZpdCcsIGNvbnRhaW5zOiAncGFkZGluZycgfSlcbiAgICAuY29uZmlnKGNvbmZpZyk7XG4gIFxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGF3YWl0IG1hcmtzLnJlbmRlcigpKTtcbn07XG5ydW4oKTsiXSwibmFtZXMiOlsiY3N2IiwiSGFuZGxl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
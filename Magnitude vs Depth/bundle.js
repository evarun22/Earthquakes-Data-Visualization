(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://raw.githubusercontent.com/evarun22/Earthquakes-Data-Visualization/master/earthquakes_cleaned.csv';

  //const start_year = 1957;
  //const end_year = 2020;
  //const num_years = end_year - start_year;

  //var sum_by_year = new Array(num_years).fill(0);

  //console.log(num_years);
  //console.log(sum_by_year);

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
        /*test
        if(d.Year==='1957')
        {
        	//console.log('true');
        }
        */
        /*
        var count=0;
        for(var i=0;i<num_years;i++)
        {
          //console.log(i);
        	if(d.Year==(i+1957))
          {
            count+=1;
          	console.log(count);
            
          }
        }
        */

        d.Magnitude = +d.Magnitude;
        d.Depth = +d.Depth;
  			d.Country = d.Country;
        d.Date = d.Date;
        //console.log(d.Year);
        //console.log(d['Year']);

        /*
        d.test =+d.Year;
        console.log(d.test);
        */
        
   			
        if(d.Magnitude>='5' && d.Magnitude<='6')
        {
        	d.mag_first_group=+d.Magnitude;
        }
        
        if(d.Magnitude>='6.01' && d.Magnitude<='7')
        {
        	d.mag_second_group=+d.Magnitude;
        }
        
        if(d.Magnitude>='7.01' && d.Magnitude<='8')
        {
        	d.mag_third_group=+d.Magnitude;
        }
        
        if(d.Magnitude>='8.01')
        {
        	d.mag_fourth_group=+d.Magnitude;
        }
        
        if(d.Magnitude>='5' && d.Magnitude<='10')
        {
        	d.mag_fifth_group=+d.Magnitude;
        }
        
        
        if(d.Depth>='0' && d.Depth<='250')
        {
        	d.dep_first_group=+d.Depth;
        }
        
        if(d.Depth>='251' && d.Depth<='500')
        {
        	d.dep_second_group=+d.Depth;
        }
        
        if(d.Depth>='501' && d.Depth<='750')
        {
        	d.dep_third_group=+d.Depth;
        }
        
        if(d.Depth>='0')
        {
        	d.dep_fourth_group=+d.Depth;
        }
        //console.log(d.Year);
        //console.log(d.first_group);
        //console.log(d.second_group);
        //console.log(d.third_group);
        //console.log(d.fourth_group);
        //console.log(d.fifth_group);
        
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    

    //console.log(data);
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight }) =>
    xScale.domain().map(tickValue => (
      React.createElement( 'g', { 
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { 
          style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
          tickValue
        )
      )
    ));

  const AxisLeft = ({ yScale,innerWidth }) =>
    yScale.domain().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
       React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    circleRadius
  }) =>
    data.map(d => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), r: circleRadius },
        React.createElement( 'title', null, 'Country: ',d.Country,', Date: ',d.Date,', Magnitude: ',xValue(d),', Depth: ',yValue(d) )
      )
    ));

  const menuHeight = 80;

  const width = 960;
  const height = 500 - menuHeight;
  const margin = { top: 20, right: 30, bottom: 65, left: 90 };
  const xAxisLabelOffset = 50;
  const yAxisLabelOffset = 45;

  const attributes=[
  	{ value: 'Magnitude', label: 'All' },
    { value: 'mag_first_group', label: '5-6' },
    { value: 'mag_second_group', label: '6-7' },
    { value: 'mag_third_group', label: '7-8' },
    { value: 'mag_fourth_group', label: '8+' },
    //{ value: 'mag_fifth_group', label: 'All Magnitudes' },
  ];

  const attributesY=[
    { value: 'Depth', label: 'All' },
    { value: 'dep_first_group', label: '0-250' },
    { value: 'dep_second_group', label: '251-500' },
    { value: 'dep_third_group', label: '501-750' },
    //{ value: 'dep_fourth_group', label: 'All Depths' },
  ];

  const App = () => {
    const data = useData();
    
    //console.log(data);

    const initialXAttribute = 'Magnitude';
    const [xAttribute, setXAttribute] = React$1.useState(initialXAttribute);

    //const xValue = d => d.Year;
    const xValue = d => d[xAttribute];
    const xAxisLabel = 'Magnitude';

    
    const initialYAttribute = 'Depth';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);

    const yValue = d => d[yAttribute];
    const yAxisLabel = 'Depth';
    //const yValue = (d) => d.Depth;
    //const yAxisLabel = 'Depth';

    //console.log(yAttribute);
    //console.log(yAxisLabel);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;
    
    
    const circleRadius=3;

    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]);
      
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0]);

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Magnitude"),
          React$1__default.createElement( ReactDropdown, {
            options: attributes, value: xAttribute, onChange: ({ value }) => setXAttribute(value) }),
          
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Depth"),
          React$1__default.createElement( ReactDropdown, { 
            options: attributesY, value: yAttribute, onChange: ({ value }) => setYAttribute(value) })
        ),

        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickOffset: 5 }),

            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${
              innerHeight / 2
            }) rotate(-90)` },
              yAxisLabel
            ),

            React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),

            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),

            React$1__default.createElement( Marks, {
              data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, circleRadius: circleRadius })
          )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
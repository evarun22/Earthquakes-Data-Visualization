(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          land: topojson.feature(topology, land),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);
    

    return data;
  };

  const csvUrl = 'https://gist.githubusercontent.com/evarun22/318274dcc33d20b753516647310c41f3/raw/dd00bf22cc62b46d823021a32ad54fece64365ef/earthquakes_cleaned.csv';

  const row = d => {
    d.Latitude = +d.Latitude;
    d.Longitude = +d.Longitude;
    d.Magnitude = +d.Magnitude;
    d.Country = d.Country;
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();

  const Marks = ({
    worldAtlas: { land, interiors },
    cities,
    sizeScale,
    sizeValue
  }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map(feature => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      React.createElement( 'g', { class: "points" },
      cities.map(d => {
        const [x, y] = projection([d.Longitude, d.Latitude]);
        return ( React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) },
        React.createElement( 'title', null,
            d.Country, " ", ' Magnitude: ', " ", d.Magnitude
        )
            )
              );
      })
    )
    )
  );

  const width = 960;
  const height = 500;



  const App = () => {
    const worldAtlas = useWorldAtlas();
    const cities = useData();

    if (!worldAtlas || !cities) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const sizeValue = d => d.Magnitude;
    const maxRadius = 5;
    const minRadius = 0.1;

    const sizeScale = d3.scaleSqrt()
      .domain([0, d3.max(cities, sizeValue)])
      .range([minRadius, maxRadius]);
    
    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( Marks, {
          worldAtlas: worldAtlas, cities: cities, sizeScale: sizeScale, sizeValue: sizeValue })
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,